@page "/sweets"
@using WebPictureApplication.Models;
@using WebPictureApplication.Pages;
@using WebPictureApplication.Shared;
@using System.Threading;


@inject NavigationManager NavigationManager;

<style>
    .layout {
        height: 90%;
        position: sticky;
        display: block;
    }

    .WhiteLayout {
        color: rgb(94, 45, 133);
    }
</style>

@code {
    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    List<Quote> Infos = new List<Quote>();
    List<TextBlock> Blocks = new List<TextBlock>();
    string up = "";

    int height = 18;
    int width = 10;
    int vertical = 3;
    int horizontal = 2;

    protected override void OnInitialized()
    {
        Quote[] infos = JsonGetter.GetSweets(@"wwwroot\Data\SweetsData.json");

        for (int i = 0; i < infos.Length; i++)
        {
            Blocks.Add(new TextBlock
            {
                Id = i,
                Text = infos[i].ShortAuthor,
                PlaceId = 0,
                FullText = new string[] { infos[i].Text, infos[i].Source, infos[i].Author },
                InnerClassInfo = "zero"
            });
        }
    }

    void HandleStatusUpdated(TextBlock updated)
    {
        up = updated.Text;
    }

    bool showModal = false;
    List<int> infos = new List<int>();
    string path;


    private void Download(int[] ids)
    {
        string path = String.Join('-', ids);
        NavigationManager.NavigateTo($"{BaseApiUrl}/download/sweets/{path}", true);
    }

    private bool CheckAllPlaces(int num)
    {
        for (int i = 1; i <= num; i++)
        {
            if (!(Blocks.Any(x => x.PlaceId == i)))
            {
                return false;
            }
        }
        return true;
    }

    private int[] MakeIdsArr(int num)
    {
        List<int> infos = new List<int>();
        infos = new List<int>();
        for (int i = 1; i <= num; i++)
        {
            infos.Add(Blocks.SingleOrDefault(x => x.PlaceId == i).Id);
        }
        return infos.ToArray();
    }

    void DownloadCover()
    {
        NavigationManager.NavigateTo($"{BaseApiUrl}/download/cover", true);
    }

    void RefreshPreset()
    {
        for (int k = 0; k < Blocks.Count; k++)
        {
            Blocks[k].PlaceId = 0;
            Blocks[k].InnerClassInfo = "zero";
        }
    }

    void SciFiPresetChange()
    {
        RefreshPreset();
        for (int i = 0; i < 6; i++)
        {
            Blocks[i].PlaceId = i + 1;
            Blocks[i].InnerClassInfo = "onmodel";
        }
    }

    void ChildPresetChange()
    {
        RefreshPreset();
        for (int i = 6; i < 12; i++)
        {
            Blocks[i].PlaceId = i - 5;
            Blocks[i].InnerClassInfo = "onmodel";
        }
    }

    void ModernPresetChange()
    {
        RefreshPreset();
        for (int i = 12; i < 18; i++)
        {
            Blocks[i].PlaceId = i - 11;
            Blocks[i].InnerClassInfo = "onmodel";
        }
    }

    void ModalShow()
    {
        if (CheckAllPlaces(6))
        {
            Download(MakeIdsArr(6));
        }
        else
        {
            showModal = true;
        }
    }
    void ModalCancel() => showModal = false;
    void ModalOk()
    {
        Console.WriteLine("Modal ok");
        showModal = false;
    }
}

<h3>Обертка для конфет</h3>
<DragNDropContainer OnStatusUpdated="HandleStatusUpdated" Blocks="Blocks" AllowCopy="true">
    <PlaceComponent HeightPercent="5"
                    WidthPercent="80"
                    Id="0"
                    DesignInfoClass="DesignClass.TopCardPicker" />

    <TableComponent Path="../PrintLayouts/sweets_moc.jpg"
                    TableWidth="32"
                    TableHeight="66"
                    TopPosition="4"
                    LeftPosition="34"
                    PlaceWidth="100"
                    PlaceHeight="17"
                    Horizontal="@horizontal"
                    Vertical="@vertical"
                    Opacity="100" />

    <div>
        <div style="background-color: transparent; display: inline-flex; justify-content: center; height: 5vh; width: 100%; align-items: center">
            <button type="button"
                    class="btn btn-prime"
                    style="background-color: rgb(100, 176, 112); margin-right: 4px;"
                    @onclick="@ModalShow">
                Скачать макет
            </button>
            <button type="button"
                    class="btn btn-prime"
                    style="background-color: rgb(100, 176, 112)"
                    @onclick="@DownloadCover">
                Скачать внешнюю часть
            </button>
        </div>
    </div>

    <div style="position: absolute; top: 50%; right: 0%; background-color: rgb(100, 176, 112); color: white; ">
        <div>
            <button type="button"
                    class="btn btn-prime"
                    @onclick="@SciFiPresetChange">
                Набор "Фантастика"
            </button>
        </div>
        <div>
            <button type="button"
                    class="btn btn-prime"
                    @onclick="@ModernPresetChange">
                Набор "Современность"
            </button>
        </div>
        <div>
            <button type="button"
                    class="btn btn-prime"
                    @onclick="@ChildPresetChange">
                Набор "Сказочный"
            </button>
        </div>
    </div>

</DragNDropContainer>
@if (showModal)
{
    <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="modal-header">
                    <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                </div>
                    <div class="modal-body">
                        Заполните все ячейки
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                    </div>
            </div>
        </div>
    </div>
}
<hr />



