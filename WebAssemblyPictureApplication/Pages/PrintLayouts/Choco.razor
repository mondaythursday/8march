@page "/choco"

@using WebAssemblyPictureApplication.Models;
@using WebAssemblyPictureApplication.Pages;
@using WebAssemblyPictureApplication.PictureMaker;


@inject NavigationManager NavigationManager;
@inject HttpClient Http;
@inject IJSRuntime JS;

@code {
    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    List<LongText> Infos = new List<LongText>();
    List<TextBlock> Blocks = new List<TextBlock>();
    string up = "";

    int height = 50;
    int width = 20;
    string colorClass = "PurpleChocoLayout";

    protected override async Task OnInitializedAsync()
    {
        colorClass = "PurpleChocoLayout";

        //PictureText[] infos = JsonGetter.GetChoco(@"wwwroot\Data\ChocoData.json");
        PictureText[] infos = await Http.GetFromJsonAsync<PictureText[]>(@"Data\ChocoData.json");

        for (int i = 0; i < infos.Length; i++)
        {
            Blocks.Add(new TextBlock
            {
                Id = i,
                Text = infos[i].Author,
                PlaceId = 0,
                FullText = new string[] { infos[i].Name, infos[i].Author, infos[i].Text },
                Path = infos[i].Picture,
                InnerClassInfo = "zero"
            });
        }
    }

    void HandleStatusUpdated(TextBlock updated)
    {
        up = updated.Text;
    }

    bool showModal = false;
    List<int> infos = new List<int>();
    string path;

    private void Download(int id)
    {
        string picturePath = Blocks[id].Path;
        string layoutPath;
        string color;
        if (colorClass == "PurpleChocoLayout")
        {
            //NavigationManager.NavigateTo($"{BaseApiUrl}/download/purplechoco/{path}", true);
            layoutPath = "./PrintLayouts/choco_violet_A4.jpg";
            color = "white";
        }
        else
        {
            //NavigationManager.NavigateTo($"{BaseApiUrl}/download/greenchoco/{path}", true);
            layoutPath = "./PrintLayouts/choco_green_A4.jpg";
            //color = "#003719";
            color = "white";
        }

        string[] nameArr = MakeLineArr(Blocks[id].FullText[0], 22);
        string[] authorArr = MakeLineArr(Blocks[id].FullText[1], 26);
        string[] textArr = MakeLineArr(Blocks[id].FullText[2], 40);

        JS.InvokeVoidAsync("makeChoco", layoutPath, picturePath, 
                            nameArr, 
                            authorArr, 
                            textArr,
                            70, 60, 40, color);
    }

    string[] MakeLineArr (string text, int max)
    {
        List<string> lineList = new List<string> { };
        string[] wordArr = text.Split(' ');
        int count = 0;
        string line = "";
        for (int i=0; i<wordArr.Length; i++)
        {
            count += wordArr[i].Length;
            if (count <= max)
            {
                line += wordArr[i];
                line += " ";
                count += 1;
            }
            else
            {
                lineList.Add(line);
                line = wordArr[i] + " ";
                count = wordArr[i].Length +1; 
            }
        }
        lineList.Add(line);
        return lineList.ToArray();
    }

    void ColorChange()
    {
        if (colorClass == "PurpleChocoLayout")
        {
            colorClass = "GreenChocoLayout";
        }
        else
        {
            colorClass = "PurpleChocoLayout";
        }
    }


    void ModalShow()
    {
        if (Blocks.Any(x => x.PlaceId == 1))
        {

            Download(Blocks.SingleOrDefault(x => x.PlaceId == 1).Id);
        }
        else
        {
            showModal = true;
        }
    }
    void ModalCancel() => showModal = false;
    void ModalOk()
    {
        Console.WriteLine("Modal ok");
        showModal = false;
    }
}

<h3>Обертка для шоколадки
    <span style="background-color: white; color: white;">
        <span class = "indextext">Forum</span>
        <span class = "didonatext">Didona</span>
        </span>
</h3> 
@if (Blocks.Count == 0)
{
    <p>Loading...</p>
}
else
{
    <DragNDropContainer OnStatusUpdated="HandleStatusUpdated" Blocks="Blocks" AllowCopy="false">
        <PlaceComponent HeightPercent="5"
                        WidthPercent="80"
                        Id="0"
                        DesignInfoClass="DesignClass.TopCardPicker" />
        <div class=@($"{colorClass} layout") style="margin-left: auto; margin-right: auto; display: flex; background-size: contain; background-position: center; background-repeat: no-repeat; ">
            <TableComponent Path="./PrintLayouts/choco_moc_violet.jpg"
                            TableWidth="33"
                            TableHeight="80"
                            TopPosition="7"
                            LeftPosition="25"
                            PlaceWidth="100"
                            PlaceHeight="70"
                            Horizontal="1"
                            Vertical="1"
                            Opacity="0" />
        </div>
        <canvas id='canvas_id' width="0" height="0"></canvas>
        <div>
            <div style="background-color: transparent;
                            display: inline-flex;
                            justify-content: center;
                            height: 5vh;
                            width: 100%;
                            align-items: center">
                <button type="button"
                        class="btn btn-prime"
                        style="background-color: rgb(100, 176, 112)"
                        @onclick="@ModalShow">
                    Скачать макет
                </button>
            </div>
        </div>

        <div style="position: absolute; top: 50%; right: 0%; background-color: rgb(100, 176, 112); color: white;">
            <label>
                <input type="radio" name="color" checked="@(colorClass == "PurpleChocoLayout")" @onchange="@ColorChange" /> Фиолетовый фон
            </label>
            <br />
            <label>
                <input type="radio" name="color" checked="@(colorClass == "GreenChocoLayout")" @onchange="@ColorChange" /> Зелёный фон
            </label>
        </div>

    </DragNDropContainer>
    @if (showModal)
    {
        <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">

                    <div class="modal-header">
                        <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                    </div>
                    <div class="modal-body">
                        Заполните все ячейки
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

