@page "/box"

@using WebAssemblyPictureApplication.Models;
@using WebAssemblyPictureApplication.Pages;
@using WebAssemblyPictureApplication.PictureMaker;


@inject NavigationManager NavigationManager;
@inject HttpClient Http;
@inject IJSRuntime JS;

@code {
    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    List<LongText> Infos = new List<LongText>();
    List<TextBlock> Blocks = new List<TextBlock>();
    string up = "";

    int height = 11;
    int width = 9;
    int vertical = 3;
    int horizontal = 4;
    string colorClass = "PurpleLayout";

    protected override async Task OnInitializedAsync()
    {
        colorClass = "PurpleLayout";

        //NamedText[] infos = JsonGetter.GetBoxes(@"wwwroot\Data\BoxData.json");

        NamedText[] infos = await Http.GetFromJsonAsync<NamedText[]>(@"Data\BoxData.json");

        for (int i = 0; i < infos.Length; i++)
        {
            Blocks.Add(new TextBlock
        {
            Id = i,
            Text = infos[i].ShortName,
            PlaceId = 0,
            FullText = new string[] { infos[i].Name, infos[i].Text },
            InnerClassInfo = "zero"
        });
        }
    }

    void HandleStatusUpdated(TextBlock updated)
    {
        up = updated.Text;
    }

    bool showModal = false;
    List<int> infos = new List<int>();
    string path;

    private void Download(int[] ids)
    {
        string path = String.Join('-', ids);

        string layoutPath;
        string color;

        List<string> nameList = new List<string>();
        List<string[]> textList = new List<string[]>();
        
        for (int i = 0; i<ids.Length; i++)
        {
            nameList.Add(Blocks[ids[i]].FullText[0]);
            textList.Add(MakeLineArr(Blocks[ids[i]].FullText[1], 30));
        }

        if (colorClass == "PurpleLayout")
        {
            color = "white";
            layoutPath = "./PrintLayouts/box_violet_A3.jpg";
        }
        else
        {
            color = "#003719";
            layoutPath = "./PrintLayouts/box_green_A3.jpg";
        }
    JS.InvokeVoidAsync("Lib.makeBox", layoutPath, 
                            nameList.ToArray(), 
                            textList.ToArray(),
                            46, color);
}

string[] MakeLineArr (string text, int max)
    {
        List<string> lineList = new List<string> { };
        string[] wordArr = text.Split(' ');
        int count = 0;
        string line = "";
        for (int i=0; i<wordArr.Length; i++)
        {
            count += wordArr[i].Length;
            if (count <= max)
            {
                line += wordArr[i];
                line += " ";
                count += 1;
            }
            else
            {
                lineList.Add(line);
                line = wordArr[i] + " ";
                count = wordArr[i].Length +1; 
            }
        }
        lineList.Add(line);
        return lineList.ToArray();
    }


private bool CheckAllPlaces(int num)
{
    for (int i = 1; i <= num; i++)
    {
        if (!(Blocks.Any(x => x.PlaceId == i)))
        {
            return false;
        }
    }
    return true;
}

private int[] MakeIdsArr(int num)
{
    List<int> infos = new List<int>();
    infos = new List<int>();
    for (int i = 1; i <= num; i++)
    {
        infos.Add(Blocks.SingleOrDefault(x => x.PlaceId == i).Id);
    }
    return infos.ToArray();
}

void ColorChange()
{
    if (colorClass == "PurpleLayout")
    {
        colorClass = "GreenLayout";
    }
    else
    {
        colorClass = "PurpleLayout";
    }
}

void RulersPresetChange()
{
    for (int k = 0; k < Blocks.Count; k++)
    {
        Blocks[k].PlaceId = 0;
        Blocks[k].InnerClassInfo = "zero";
    }
    for (int i = 0; i < 12; i++)
    {
        Blocks[i].PlaceId = i + 1;
        Blocks[i].InnerClassInfo = "onmodel";
    }

}

void ScientistsPresetChange()
{
    for (int k = 0; k < Blocks.Count; k++)
    {
        Blocks[k].PlaceId = 0;
        Blocks[k].InnerClassInfo = "zero";
    }
    for (int i = 12; i < 24; i++)
    {
        Blocks[i].PlaceId = i - 11;
        Blocks[i].InnerClassInfo = "onmodel";
    }
}


void ModalShow()
{
    if (CheckAllPlaces(12))
    {

        Download(MakeIdsArr(12));
    }
    else
    {
        showModal = true;
    }
}
void ModalCancel() => showModal = false;
void ModalOk()
{
    Console.WriteLine("Modal ok");
    showModal = false;
}
}

<h3>Коробка для небольших подарков
    <span style="background-color: white; color: white;">
        <span class = "indextext">Forum</span>
        <span class = "didonatext">Didona</span>
        </span>
        <div class="dropdown">
  <button class="dropbtn">Как пользоваться конструктором</button>
  <div class="dropdown-content">
    <ol>
        <li>Перетащите зелёные блоки с фамилиями непосредственно на макет или выберите готовый тематический набор.</li>
        <li>На макете блок автоматически развернётся в полный вид.</li>
        <li>Вы можете редактировать готовый набор.</li>
        <li>Вы можете перетаскивать блоки по макету.</li>
        <li>Если вы передумали насчёт одного из блоков, перетащите его обратно наверх.</li>
        <li>Если вы хотите переместить блок на место другого, просто сделайте это. Старый блок сам вернётся наверх.</li>      
        <li>Не бойтесь, если блоки выходят за пределы макета - это проблема онлайн-вёрстки. На печатном макете всё будет хорошо.</li>
        <li>Выберите цвет макета.</li>
        <li>Когда вы заполните все 12 ячеек, нажмите на кнопку "Скачать".</li>
        <li>Перейдите на страницу "Рекомендации", чтобы узнать о рекомендуемом формате и других аспектах печати.</li>
    </ol>
  </div>
</div>
</h3>
@if (Blocks.Count == 0)
{
    <p>Loading...</p>
}
else
{
    <DragNDropContainer OnStatusUpdated="HandleStatusUpdated" Blocks="Blocks" AllowCopy="false">
        <PlaceComponent HeightPercent="5"
                        WidthPercent="80"
                        Id="0"
                        DesignInfoClass="DesignClass.TopCardPicker" />

        <div class=@($"{colorClass} layout") style="margin-left: auto; margin-right: auto; display: flex; background-size: contain; background-position: center; background-repeat: no-repeat ">
            <TableComponent Path="./PrintLayouts/box_moc_violet.jpg"
                            TableWidth="60"
                            TableHeight="67"
                            TopPosition="34"
                            LeftPosition="4"
                            PlaceWidth="100"
                            PlaceHeight="17"
                            Horizontal="@horizontal"
                            Vertical="@vertical"
                            Opacity="0" />
        </div>
        <canvas id='box_canvas_id' width="0" height="0"></canvas>

        <div style="background-color: transparent; display: inline-flex; justify-content: center; height: 5vh; width: 100%; align-items: center">
            <button type="button"
                    class="btn btn-prime"
                    style="background-color: rgb(100, 176, 112)"
                    @onclick="@ModalShow">
                Скачать макет
            </button>
        </div>

        <div style="position: absolute; top: 50%; right: 0%; color: white; ">
            <div style="padding-right:10px; padding-left:10px; background-color: rgb(100, 176, 112);">
                <label>
                    <input type="radio" name="color" checked="@(colorClass == "PurpleLayout")" @onchange="@ColorChange" /> Фиолетовый фон
                </label>
                <br />
                <label>
                    <input type="radio" name="color" checked="@(colorClass == "GreenLayout")" @onchange="@ColorChange" /> Зелёный фон
                </label>
            </div>
            <div style="margin-top: 2px; background-color: rgb(100, 176, 112);">
                <div>
                    <button type="button"
                            class="btn btn-prime"
                            @onclick="@ScientistsPresetChange">
                        Набор "Учёные"
                    </button>
                </div>
                <div>
                    <button type="button"
                            class="btn btn-prime"
                            @onclick="@RulersPresetChange">
                        Набор "Правительницы"
                    </button>
                </div>
            </div>
        </div>

    </DragNDropContainer>
    @if (showModal)
    {
        <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-body">
                        Заполните все ячейки
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn" @onclick="@ModalCancel">Закрыть</button>
                    </div>
                </div>
            </div>
        </div>
    }
}
