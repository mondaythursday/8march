@using Models

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public EventCallback<TextBlock> OnStatusUpdated { get; set; }

    public TextBlock Payload { get; set; }
    [Parameter] public List<TextBlock> Blocks { get; set; }
    [Parameter] public bool AllowCopy { get; set; }

    public async Task UpdateJobAsync(int id)
    {
        if (AllowCopy)
        {
            //placeid
            var block = Blocks.SingleOrDefault(x => (x.Id == Payload.Id && x.PlaceId == Payload.PlaceId));

            if (block != null)
            {
                if (id != 0)
                {
                    var oldBlock = Blocks.SingleOrDefault(x => x.PlaceId == id);
                    if (oldBlock != null)
                    {
                        Blocks.Remove(oldBlock);
                    }
                    TextBlock newBlock = new TextBlock
                    {
                        FullText = block.FullText,
                        Id = block.Id,
                        Text = block.Text,
                        PlaceId = id,
                        InnerClassInfo = "onmodel"
                    };
                    Blocks.Add(newBlock);
                }
                else if(id == 0 && block.PlaceId == 0)
                {}
                else
                {
                    Blocks.Remove(block);
                }
                await OnStatusUpdated.InvokeAsync(Payload);
            }
        }
        else
        {
            var block = Blocks.SingleOrDefault(x => x.Id == Payload.Id);

            if (block != null)
            {
                if (id != 0)
                {
                    var oldBlock = Blocks.SingleOrDefault(x => x.PlaceId == id);
                    if (oldBlock != null)
                    {
                        oldBlock.PlaceId = 0;
                        oldBlock.InnerClassInfo = "zero";
                    }
                }
                block.PlaceId = id;
                if (id != 0)
                {
                    block.InnerClassInfo = "onmodel";
                }
                else
                {
                    block.InnerClassInfo = "zero";
                }
                await OnStatusUpdated.InvokeAsync(Payload);
            }
        }
    }
}

<div class="jobs-container img-responsive">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>